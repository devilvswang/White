//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Shield.WCFReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/K2Platform_FieldBatchService")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCFReference.IFieldBatchService")]
    public interface IFieldBatchService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFieldBatchService/BatchSetAllUserFieldCache", ReplyAction="http://tempuri.org/IFieldBatchService/BatchSetAllUserFieldCacheResponse")]
        string BatchSetAllUserFieldCache();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFieldBatchService/BatchSetAllUserFieldCache", ReplyAction="http://tempuri.org/IFieldBatchService/BatchSetAllUserFieldCacheResponse")]
        System.Threading.Tasks.Task<string> BatchSetAllUserFieldCacheAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFieldBatchService/UpdateAllUserPartFieldCache", ReplyAction="http://tempuri.org/IFieldBatchService/UpdateAllUserPartFieldCacheResponse")]
        string UpdateAllUserPartFieldCache();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFieldBatchService/UpdateAllUserPartFieldCache", ReplyAction="http://tempuri.org/IFieldBatchService/UpdateAllUserPartFieldCacheResponse")]
        System.Threading.Tasks.Task<string> UpdateAllUserPartFieldCacheAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFieldBatchService/CheckUserCacheExist", ReplyAction="http://tempuri.org/IFieldBatchService/CheckUserCacheExistResponse")]
        string CheckUserCacheExist();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFieldBatchService/CheckUserCacheExist", ReplyAction="http://tempuri.org/IFieldBatchService/CheckUserCacheExistResponse")]
        System.Threading.Tasks.Task<string> CheckUserCacheExistAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFieldBatchService/GetData", ReplyAction="http://tempuri.org/IFieldBatchService/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFieldBatchService/GetData", ReplyAction="http://tempuri.org/IFieldBatchService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFieldBatchService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IFieldBatchService/GetDataUsingDataContractResponse")]
        Shield.WCFReference.CompositeType GetDataUsingDataContract(Shield.WCFReference.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFieldBatchService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IFieldBatchService/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<Shield.WCFReference.CompositeType> GetDataUsingDataContractAsync(Shield.WCFReference.CompositeType composite);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFieldBatchServiceChannel : Shield.WCFReference.IFieldBatchService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FieldBatchServiceClient : System.ServiceModel.ClientBase<Shield.WCFReference.IFieldBatchService>, Shield.WCFReference.IFieldBatchService {
        
        public FieldBatchServiceClient() {
        }
        
        public FieldBatchServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FieldBatchServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FieldBatchServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FieldBatchServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string BatchSetAllUserFieldCache() {
            return base.Channel.BatchSetAllUserFieldCache();
        }
        
        public System.Threading.Tasks.Task<string> BatchSetAllUserFieldCacheAsync() {
            return base.Channel.BatchSetAllUserFieldCacheAsync();
        }
        
        public string UpdateAllUserPartFieldCache() {
            return base.Channel.UpdateAllUserPartFieldCache();
        }
        
        public System.Threading.Tasks.Task<string> UpdateAllUserPartFieldCacheAsync() {
            return base.Channel.UpdateAllUserPartFieldCacheAsync();
        }
        
        public string CheckUserCacheExist() {
            return base.Channel.CheckUserCacheExist();
        }
        
        public System.Threading.Tasks.Task<string> CheckUserCacheExistAsync() {
            return base.Channel.CheckUserCacheExistAsync();
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public Shield.WCFReference.CompositeType GetDataUsingDataContract(Shield.WCFReference.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<Shield.WCFReference.CompositeType> GetDataUsingDataContractAsync(Shield.WCFReference.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
    }
}
